// Code generated by protoc-gen-go.
// source: protocol.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	protocol.proto

It has these top-level messages:
	HostListReq
	HostListRes
	HostAddReq
	HostAddRes
	HostRemoveReq
	HostRemoveRes
	Host
*/
package protocol

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type HostListReq struct {
}

func (m *HostListReq) Reset()         { *m = HostListReq{} }
func (m *HostListReq) String() string { return proto.CompactTextString(m) }
func (*HostListReq) ProtoMessage()    {}

type HostListRes struct {
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *HostListRes) Reset()         { *m = HostListRes{} }
func (m *HostListRes) String() string { return proto.CompactTextString(m) }
func (*HostListRes) ProtoMessage()    {}

func (m *HostListRes) GetHosts() []*Host {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type HostAddReq struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	AllocateIPv4 bool   `protobuf:"varint,2,opt,name=allocateIPv4" json:"allocateIPv4,omitempty"`
}

func (m *HostAddReq) Reset()         { *m = HostAddReq{} }
func (m *HostAddReq) String() string { return proto.CompactTextString(m) }
func (*HostAddReq) ProtoMessage()    {}

type HostAddRes struct {
	Host *Host `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
}

func (m *HostAddRes) Reset()         { *m = HostAddRes{} }
func (m *HostAddRes) String() string { return proto.CompactTextString(m) }
func (*HostAddRes) ProtoMessage()    {}

func (m *HostAddRes) GetHost() *Host {
	if m != nil {
		return m.Host
	}
	return nil
}

type HostRemoveReq struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *HostRemoveReq) Reset()         { *m = HostRemoveReq{} }
func (m *HostRemoveReq) String() string { return proto.CompactTextString(m) }
func (*HostRemoveReq) ProtoMessage()    {}

type HostRemoveRes struct {
}

func (m *HostRemoveRes) Reset()         { *m = HostRemoveRes{} }
func (m *HostRemoveRes) String() string { return proto.CompactTextString(m) }
func (*HostRemoveRes) ProtoMessage()    {}

type Host struct {
	Id   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Ipv4 []string `protobuf:"bytes,3,rep,name=ipv4" json:"ipv4,omitempty"`
	Ipv6 []string `protobuf:"bytes,4,rep,name=ipv6" json:"ipv6,omitempty"`
	Up   bool     `protobuf:"varint,5,opt,name=up" json:"up,omitempty"`
}

func (m *Host) Reset()         { *m = Host{} }
func (m *Host) String() string { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Hosts service

type HostsClient interface {
	List(ctx context.Context, in *HostListReq, opts ...grpc.CallOption) (*HostListRes, error)
	Add(ctx context.Context, in *HostAddReq, opts ...grpc.CallOption) (*HostAddRes, error)
	Remove(ctx context.Context, in *HostRemoveReq, opts ...grpc.CallOption) (*HostRemoveRes, error)
}

type hostsClient struct {
	cc *grpc.ClientConn
}

func NewHostsClient(cc *grpc.ClientConn) HostsClient {
	return &hostsClient{cc}
}

func (c *hostsClient) List(ctx context.Context, in *HostListReq, opts ...grpc.CallOption) (*HostListRes, error) {
	out := new(HostListRes)
	err := grpc.Invoke(ctx, "/protocol.Hosts/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostsClient) Add(ctx context.Context, in *HostAddReq, opts ...grpc.CallOption) (*HostAddRes, error) {
	out := new(HostAddRes)
	err := grpc.Invoke(ctx, "/protocol.Hosts/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostsClient) Remove(ctx context.Context, in *HostRemoveReq, opts ...grpc.CallOption) (*HostRemoveRes, error) {
	out := new(HostRemoveRes)
	err := grpc.Invoke(ctx, "/protocol.Hosts/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hosts service

type HostsServer interface {
	List(context.Context, *HostListReq) (*HostListRes, error)
	Add(context.Context, *HostAddReq) (*HostAddRes, error)
	Remove(context.Context, *HostRemoveReq) (*HostRemoveRes, error)
}

func RegisterHostsServer(s *grpc.Server, srv HostsServer) {
	s.RegisterService(&_Hosts_serviceDesc, srv)
}

func _Hosts_List_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(HostListReq)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(HostsServer).List(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Hosts_Add_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(HostAddReq)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(HostsServer).Add(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Hosts_Remove_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(HostRemoveReq)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(HostsServer).Remove(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Hosts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Hosts",
	HandlerType: (*HostsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Hosts_List_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Hosts_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Hosts_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
